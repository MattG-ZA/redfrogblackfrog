{"version":3,"sources":["components/Card/Card.js","components/PlayerCardWrapper/PlayerCardWrapper.js","components/CentreCardWrapper/CentreCardWrapper.js","components/PlayingArea/PlayingArea.js","logic/GameInit.js","components/App.js","index.js"],"names":["BuildCardClass","card","cardClass","showFace","concat","suit","BuildCardStyle","totalCards","cardStyle","transform","transformCard","type","degrees","total","translate","index","totalCardsSplit","Math","floor","RotateCard","highlight","zoom","zIndex","boxShadow","Card","_ref","selectCard","highlightCard","react_default","a","createElement","onClick","style","className","display","PlayerCardWrapper","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","playerHand","forEach","setState","state","_this2","_this$props","player","map","components_Card_Card","key","length","React","Component","CentreCardWrapper","addCard","circleCards","push","value","removeCard","splice","console","log","PlayingArea","selectCards","playerCard","circleCard","playerHands","first","shuffledDeck","components_PlayerCardWrapper_PlayerCardWrapper","second","components_CentreCardWrapper_CentreCardWrapper","GetCardDisplay","displayValue","App","deck","i","randomCardIndex","random","selectedCard","ShuffleCardDeck","suits","j","BuildCardDeck","DealOpeningCircle","deckSize","DealPlayerHands","components_PlayingArea_PlayingArea","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.8b65c049.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst RotateCard = (card, totalCards) => {\r\n    let transformCard = 'none';\r\n\r\n    if (totalCards.type === 'circleCards') {\r\n        const degrees = 360 / (totalCards.total - 1);\r\n        // Ensure the deck card stays in the centre\r\n        const translate = card.suit === 'deckCard' ? 0 : 15;\r\n\r\n        transformCard = `rotate(${card.index * degrees}deg) translate(${translate}em) rotate(${360 - (card.index * degrees)}deg)`;\r\n    }\r\n    else if (totalCards.type === 'playerCards') {\r\n        const totalCardsSplit = Math.floor(totalCards.total / 2);\r\n        const degrees = 35 / totalCardsSplit;\r\n\r\n        // Change the rotation of cards slightly for an even hand\r\n        if ((totalCards.total) / 2 % 1 === 0 && card.index >= totalCardsSplit) {\r\n            card.index += 1;\r\n        }\r\n\r\n        transformCard = `rotate(${(card.index * degrees) - 35}deg)`;\r\n    }\r\n\r\n    return transformCard;\r\n}\r\n\r\nconst BuildCardClass = (card) => {\r\n    let cardClass = card.showFace ? `card suit${card.suit}` : 'card back';\r\n\r\n    if (card.suit === 'deckCard') {\r\n        cardClass += ' centre';\r\n    }\r\n\r\n    return cardClass;\r\n}\r\n\r\nconst BuildCardStyle = (card, totalCards) => {\r\n    let cardStyle = {};\r\n\r\n    cardStyle.transform = RotateCard(card, totalCards);\r\n\r\n    if (card.highlight) {\r\n        cardStyle.zoom = 1.1;\r\n        cardStyle.zIndex = 1000;\r\n        cardStyle.boxShadow = '4px 4px 8px rgba(0,0,0,0.3)';\r\n    }\r\n\r\n    return cardStyle;\r\n}\r\n\r\nconst Card = ({ card, totalCards, selectCard, highlightCard }) => {\r\n    card.type = totalCards.type;\r\n\r\n    return (\r\n        <span onClick={() => {selectCard(card); highlightCard(card)}} style={BuildCardStyle(card, totalCards)} className={BuildCardClass(card)}>\r\n            <span>\r\n                {card.showFace && <p>{card.display}</p>}\r\n            </span>\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport './PlayerCardWrapper.scss';\r\nimport Card from '../Card/Card';\r\n\r\nclass PlayerCardWrapper extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { highlightCard: {} };\r\n    }\r\n\r\n    highlightCard = (card) => {\r\n        // Only highlight if clicking one of your own cards\r\n        if (card.showFace) {\r\n            const { playerHand } = this.props;\r\n\r\n            playerHand.forEach(card => {\r\n                card.highlight = false;\r\n            });\r\n\r\n            card.highlight = true;\r\n            this.setState({highlightCard: card});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { playerHand, player, selectCard } = this.props;\r\n\r\n        return (\r\n            <div className={'player-card-wrapper ' + player}>\r\n                {playerHand.map((card, index) => {\r\n                    card.index = index;\r\n                    return <Card\r\n                        key={index}\r\n                        card={card}\r\n                        totalCards={{ total: playerHand.length, type: 'playerCards' }}\r\n                        selectCard={selectCard}\r\n                        highlightCard={this.highlightCard}\r\n                    />\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default PlayerCardWrapper;","import React from 'react';\r\nimport './CentreCardWrapper.scss';\r\nimport Card from '../Card/Card';\r\n\r\nclass CentreCardWrapper extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { circleCards: props.circleCards };\r\n    }\r\n\r\n    // Test only code\r\n    addCard = () => {\r\n        const circleCards = this.state.circleCards;\r\n        circleCards.push({ value: 10, suit: 'hearts', display: 10, showFace: true, index: circleCards.length });\r\n        this.setState({ circleCards });\r\n    }\r\n\r\n    removeCard = () => {\r\n        let circleCards = this.state.circleCards;\r\n        circleCards.splice(circleCards.length - 1, 1);\r\n        this.setState({ circleCards });\r\n    }\r\n    // End of test only code\r\n\r\n    highlightCard = (card) => {\r\n        console.log('Highlight CIRCLE card');\r\n    }\r\n\r\n    render() {\r\n        const { selectCard } = this.props;\r\n\r\n        return (\r\n            <div className='centre-container'>\r\n                {/* Test only code */}\r\n                <button style={{ display: 'block' }} onClick={this.addCard}>Add</button>\r\n                <button style={{ display: 'block' }} onClick={this.removeCard}>Remove</button >\r\n                {/* End of test only code */}\r\n\r\n                <div className='circle-container'>\r\n                    {this.state.circleCards.map((card, index) => {\r\n                        card.index = index;\r\n                        return <Card\r\n                            key={index}\r\n                            card={card}\r\n                            totalCards={{ total: this.state.circleCards.length, type: 'circleCards' }}\r\n                            selectCard={selectCard}\r\n                            highlightCard={this.highlightCard}\r\n                        />\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CentreCardWrapper;","import React from 'react';\r\nimport './PlayingArea.css';\r\nimport PlayerCardWrapper from '../PlayerCardWrapper/PlayerCardWrapper';\r\nimport CentreCardWrapper from '../CentreCardWrapper/CentreCardWrapper';\r\n\r\nclass PlayingArea extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            shuffledDeck: props.shuffledDeck,\r\n            circleCards: props.circleCards,\r\n            playerHands: props.playerHands,\r\n        };\r\n\r\n        this.selectCards = {\r\n            playerCard: {},\r\n            circleCard: {},\r\n        };\r\n    }\r\n\r\n    selectCard = (card) => {\r\n        if (card.type === 'playerCards') {\r\n            this.selectCards.playerCard = card;\r\n        }\r\n        else if (card.type === 'circleCards') {\r\n            this.selectCards.circleCard = card;\r\n        }\r\n\r\n        // Temp code\r\n        if (this.selectCards.playerCard && this.selectCards.circleCard) {\r\n            if (this.selectCards.playerCard.value + this.selectCards.circleCard.value === 10) {\r\n                const circleCards = this.state.circleCards;\r\n                const playerHands = this.state.playerHands;\r\n                \r\n                circleCards.splice(this.selectCards.circleCard.index, 1);\r\n                playerHands.first.splice(this.selectCards.playerCard.index, 1);\r\n\r\n                console.log('--------');\r\n                console.log('this.selectCards.playerCard', this.selectCards.playerCard);\r\n                console.log('this.selectCards.playerCard.index', this.selectCards.playerCard.index);\r\n                console.log('--------');\r\n\r\n                this.setState({ circleCards, playerHands });\r\n\r\n                this.selectCards = {\r\n                    playerCard: {},\r\n                    circleCard: {},\r\n                };\r\n            }\r\n        }\r\n\r\n        // console.log(this.selectCards);\r\n    }\r\n\r\n    render() {\r\n        // console.log('deck ', this.state.shuffledDeck);\r\n        // console.log('circle ', this.state.circleCards);\r\n        // console.log('hands ', this.state.playerHands);\r\n\r\n        return (\r\n            <span className=\"playing-area\">\r\n                <PlayerCardWrapper playerHand={this.state.playerHands.second} player={\"player-two\"} selectCard={this.selectCard} />\r\n                <CentreCardWrapper circleCards={this.state.circleCards} selectCard={this.selectCard} />\r\n                <PlayerCardWrapper playerHand={this.state.playerHands.first} player={\"player-one\"} selectCard={this.selectCard} />\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayingArea;","export const BuildCardDeck = () => {\r\n    const suits = ['clubs', 'diamonds', 'hearts', 'spades'];\r\n    const deck = [];\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n        for (let j = 1; j < 14; j++) {\r\n            deck.push({\r\n                value: j,\r\n                suit: suits[i],\r\n                display: GetCardDisplay(j),\r\n                showFace: true,\r\n                highlight: false,\r\n            });\r\n        }\r\n    }\r\n\r\n    return deck;\r\n};\r\n\r\nconst GetCardDisplay = (value) => {\r\n    let displayValue = '';\r\n\r\n    switch (value) {\r\n        case 1:\r\n            displayValue = 'A';\r\n            break;\r\n        case 11:\r\n            displayValue = 'J';\r\n            break;\r\n        case 12:\r\n            displayValue = 'Q';\r\n            break;\r\n        case 13:\r\n            displayValue = 'K';\r\n            break;\r\n        default:\r\n            displayValue = value;\r\n    }\r\n\r\n    return displayValue;\r\n};\r\n\r\nexport const ShuffleCardDeck = (deck) => {\r\n    const shuffledDeck = [];\r\n\r\n    for (let i = 52; i > 0; i--) {\r\n        const randomCardIndex = Math.floor(Math.random() * i);\r\n        const selectedCard = deck[randomCardIndex];\r\n\r\n        shuffledDeck.push(selectedCard);\r\n        deck.splice(randomCardIndex, 1);\r\n    }\r\n\r\n    return shuffledDeck;\r\n};\r\n\r\nexport const DealOpeningCircle = (deck) => {\r\n    let circleCards = [];\r\n    circleCards.push({ value: 0, suit: 'deckCard', display: 0, showFace: false, index: 0 });\r\n    circleCards = circleCards.concat(deck.splice(deck.length - 12, deck.length));\r\n\r\n    return circleCards;\r\n}\r\n\r\nexport const DealPlayerHands = (deck) => {\r\n    const playerHands = {\r\n        first: [],\r\n        second: [],\r\n    };\r\n\r\n    const deckSize = deck.length;\r\n\r\n    for (let i = deckSize - 1; i > deckSize - 21; i--) {\r\n        if (i % 2 === 0) {\r\n            deck[i].showFace = false;\r\n            playerHands.second.push(deck[i]);\r\n        }\r\n        else {\r\n            playerHands.first.push(deck[i]);\r\n        }\r\n\r\n        deck.splice(i, 1);\r\n    }\r\n\r\n    return playerHands;\r\n}","import React, { Component } from 'react';\nimport PlayingArea from './PlayingArea/PlayingArea';\nimport { BuildCardDeck, ShuffleCardDeck, DealOpeningCircle, DealPlayerHands } from '../logic/GameInit';\n\nclass App extends Component {\n  render() {\n    const deck = BuildCardDeck();\n    const shuffledDeck = ShuffleCardDeck(deck);\n    const circleCards = DealOpeningCircle(shuffledDeck);\n    const playerHands = DealPlayerHands(shuffledDeck);\n\n    return <PlayingArea\n      shuffledDeck={shuffledDeck}\n      circleCards={circleCards}\n      playerHands={playerHands}\n    />;\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}